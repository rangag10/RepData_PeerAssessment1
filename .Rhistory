x <-c(t)
x
mean(x)
mean(is.numeric(x))
x
mean(as.numeric(x))
mean(s[1], na.rm=TRUE)
s
s[1]
mean(s[1])
mean(is.na(s[1]), na.rm=TRUE)
?mean
mean(is.na(s[2]), na.rm=TRUE)
mean(s[1], na.rm=TRUE)
sapply(s[1], mean)
sapply(s[1], mean, na.rm=TRUE)
colMeans(s[1])
colMeans(s[1], na.rm=TRUE)
s
sub.data <- s[s$Ozone > 31]
s$Ozone
sub.data <- s[Ozone > 31]
sub.data <- s[s[1] > 31]
sub.data
s
s1 <- subset(s, Ozone>31)
s1
s1 <- subset(s, Ozone>31 & Temp >90)
s1
sapply(s1,mean)
s3 <- s[Ozone>31 & Temp >90]
s3 <- s[s$Ozone>31 & s$Temp >90]
s3 <- s[s$Ozone>31\
s3 <- s[s$Ozone>31]
s3 <- s[$Ozone>31]
s3 <- s[s[1]>31]
s3
s3 <- s[s[,1]>31]
s3 <- s[$Ozone>31]
s3 <- s[s$Ozone>31]
s
s
s4 <- subset(s, month==6)
s4 <- subset(s, Month==6)
s4
sapply(s4,mean)
s4 <- subset(s, Month==5)
sapply, max)
sapply(s4,max)
sapply(s4,max,na.rm=TRUE)
iris
names(iris)
?par
x <- rnorm(100)
plot(x)
hist(x)
plot(x,y)
y <-rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
pch=3
pch=2
pch=5
plot(x,y,pch=4)
plot(x,y,pch=3)
plot(x,y,pch=2)
example(points)
plot(x,y,pch=2)
y <-rnorm(100)
x <- rnorm(100)
plot(x,y)
title("first scatterplot")
text(-2,-2,"sample text")
legend()
legend("topleft")
legend("topleft", legend="Data", pch=20)
fit <- lm(x ~ y)
abline(fit)
abline(fit,lwd=4)
abline(col="blue")
abline(fit,lwd=4,col="blue")
plot(xlab="weight")
xlab<-weight
z <- rpois(100,2)
par(mfrow(2,1))
par(mfrow=c(2,1))
plot(x,y)
plot(x,z)
par(mar=(2,2,2,2))
par(mar=c(2,2,2,2))
par(mar=c(2,4,2,2))
par(mar=c(2,2,2,2))
plot(x,z)
plot(x,y)
par(mar=c(4,4,4,4))
par(mar=c(1,1,1,1))
par(mar=c(1,1,1,1))
plot(x,y)
par(mfrow(2,1))
par(mfrow=c(2,1))
plot(x,y)
plot(x,z)
mfrow
par(mfrow)
mfrow?
par(mfrow=c(1,1))
x<-rnorm(100)
y<- x+rnorm(100)
g<-gl(2,50)
g
g<-gl(2,50,labels=c("male","female"))
g
x
y
plot (x, y, type=n)
plot (x, y, type="n")
points(x[g="male"], y[g="male"], col="Green")
points(x[g=="male"], y[g=="male"], col="Green")
points(x[g=="female"], y[g=="female"], col="blue")
?devices
?Devices
windows()
plot(x,y)
library(manipulate)
x <- rnorm(100)
y <- rnorm(100)
hist(x)
manipulate(hist(x))
slider(min(x),max(X), step=0.3)
slider(1,10, step=0.5)
sl <- slider(0,1, step=0.05)
manipulate(hist(x),sl)
library(knitr)
install.packages("knitr")
library(knitr)
setwd("C:/Coursera/Reproducible research/peerassign1/RepData_PeerAssessment1")
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses="character")
inDF
inDF
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric",character","numeric"")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character","numeric"))
inDF
class(inDF[,1])
class(inDF[,2])
class(inDF[,3])
inDF[,2]
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
class(inDF[,2])
inDF
agDF <- aggregate.data.frame(inDF, by="date", FUN="sum", na.rm=TRUE )
agDF <- aggregate(inDF$steps, list(date), sum, na.rm=TRUE )
agDF <- aggregate(inDF$steps, list(inDF$date), sum, na.rm=TRUE )
agDF
agDF
hist(agDF)
hist(agDF[,2])
hist(agDF[,2], col="blue")
hist(agDF[,2], col="grey")
hist(agDF[,2], col="grey", main="Total Number of Steps Taken Each Day")
hist(agDF[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
if (!exists(inDF))
{
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
}
else
{
print("inDF already loaded")
}
tf <- !exists(inDF)
inDF
tf <- !exists("inDF")
tf <- !exists(inDF)
exists(inDF)
inDF
exists(inDF)
exists("inDF")
!exists("inDF")
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
inDF
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
if (!exists("inDF"))
{
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
}
else
{
print("inDF already loaded")
}
inDF
exists(inDF)
exists("inDF"
)
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
exists("inDF"
)
agMeanDF <- aggregate(inDF$steps, list(inDF$date), mean, na.rm=TRUE)
agMeanDF
agMedianDF <- aggregate(inDF$steps, list(inDF$date), mean, na.rm=TRUE)
agMedianDF
summary(agMedianDF)
hist(agMedianDF[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean <- mean(agDF[,2])
inDF
agDF <- aggregate(inDF$steps, list(inDF$date), sum, na.rm=TRUE )
agMean <- mean(agDF[,2])
agMean
agMedian <- median(agDF[,2])
agMedian
hist(agDF[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval, mean, na.rm=TRUE))
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval, FUN="mean", na.rm=TRUE))
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval), mean, na.rm=TRUE)
dailyAvgDF
plot(dailyAvgDF[,1], dailyAvgDF[,2],type="l", main="Average Daily Activity Pattern", xlab="Intervals", ylab="Average # of Steps Taken")
maxInterval <- dailyAvgDF[1, max(dailyAvgDF$x)]
maxInterval
maxInterval <- dailyAvgDF[1, dailyAvgDF$x==max(dailyAvgDF[,2])]
maxInterval
maxVals <- subset(dailyAvgDF, max(x))
maxVals <- subset(dailyAvgDF, x ==max(x)
)
maxVals
maxVals <- subset(dailyAvgDF, x ==max(x))
maxVals
nrow(inDF
)
nrows(inDF)
nrow(inDF)
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
nrow(inDF)
t <-complete.cases(inDF)
t
inDF2<-inDF[t]
inDF2<-inDF[t]
dailyAvgDF
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval), mean, na.rm=TRUE)
dailyAvgDF
numNA <- count(is.na(inDF[,1]))
numNA <- sum(is.na(inDF[,1]))
numNA
dailyAvgDF
colnames(dailyAvgDF) <- c("interval", "avgSteps")
dailyAvgDF
inDF
inDF[1,]
interval <- inDF[1,3]
interval
tempDF <- dailyAvgDF[dailyAvgDF$interval == interval]
tempDF
tempDF <- subset(dailyAvgDF, dailyAvgDF$interval == interval)
tempDF
tempDF <- subset(dailyAvgDF, dailyAvgDF$interval == interval)
interval
names(dailyAvgDF)
tsInt <- inDF[1,3]
tsInt
tempDF <- subset(dailyAvgDF, interval == tsInt)
tempDF
numIterations <- nrow(inDF)
for (i in 1:numIterations)
{
if(is.na(inDF[i,1]))
tsInt <- inDF[i,3]
tempDF <- subset(dailyAvgDF, interval == tsInt)
inDF[1,3] <- tempDF[1,2]
}
inDF
inDF[1]
inDF[1,1]
inDF[2,1]
tsInt
tempDF
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
agDF <- aggregate(inDF$steps, list(inDF$date), sum, na.rm=TRUE )
hist(agDF[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean <- mean(agDF[,2])
agMedian <- median(agDF[,2])
agMean
agMedian
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval), mean, na.rm=TRUE)
colnames(dailyAvgDF) <- c("interval", "avgSteps")
plot(dailyAvgDF[,1], dailyAvgDF[,2],type="l", main="Average Daily Activity Pattern", xlab="Intervals", ylab="Avg. # of Steps Taken")
maxVals <- subset(dailyAvgDF, avgSteps==max(avgSteps))
numNA <- sum(is.na(inDF[,1]))
numNA
numIterations <- nrow(inDF)
for (i in 1:numIterations)
{
if(is.na(inDF[i,1]))
tsInt <- inDF[i,3]
tempDF <- subset(dailyAvgDF, interval == tsInt)
inDF[i,1] <- tempDF[1,2]
}
inDF[1:10,]
inDF
head(inDF)
head(inDF,100)
newDF
unzip("activity.zip")
inDF <- read.csv("activity.csv", header=TRUE, colClasses=c("numeric","character",
"numeric"))
inDF[,2] <- as.Date(inDF[,2], format="%Y-%m-%d")
head(inDF[1:20,])
agDF <- aggregate(inDF$steps, list(inDF$date), sum, na.rm=TRUE )
hist(agDF[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean <- mean(agDF[,2])
agMedian <- median(agDF[,2])
dailyAvgDF <- aggregate(inDF$steps, list(inDF$interval), mean, na.rm=TRUE)
colnames(dailyAvgDF) <- c("interval", "avgSteps")
plot(dailyAvgDF[,1], dailyAvgDF[,2],type="l", main="Average Daily Activity Pattern", xlab="Intervals", ylab="Avg. # of Steps Taken")
maxVals <- subset(dailyAvgDF, avgSteps==max(avgSteps))
numNA <- sum(is.na(inDF[,1]))
numNA
newDF <- inDF
numIterations <- nrow(inDF)
for (i in 1:numIterations)
{
if(is.na(newDF[i,1]))
tsInt <- inDF[i,3]
tempDF <- subset(dailyAvgDF, interval == tsInt)
newDF[i,1] <- tempDF[1,2]
}
agDF2 <- aggregate(newDF$steps, list(inDF$date), sum, na.rm=TRUE )
hist(agDF2[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean2 <- mean(agDF2[,2])
agMedian2 <- median(agDF2[,2])
newDF
head(newDF[1:20])
head(newDF[1:20,])
newDF[1:20,]
inDF[1:20,]
newDF <- inDF
numIterations <- nrow(inDF)
for (i in 1:numIterations)
{
if(is.na(newDF[i,1]))
{
tsInt <- inDF[i,3]
tempDF <- subset(dailyAvgDF, interval == tsInt)
newDF[i,1] <- tempDF[1,2]
}
}
newDF[1:20,]
agDF2 <- aggregate(newDF$steps, list(inDF$date), sum, na.rm=TRUE )
hist(agDF2[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean2 <- mean(agDF2[,2])
agMedian2 <- median(agDF2[,2])
agMean2
agMedian2
wdrecs <- subset(newDF,)
wdrecs
newDF$day <- weekdays(df$date)
names(newDF)
weekdays(newDF[1,2])
wdays <- weekdays(df$date)
wdays <- weekdays(df$date)
wdays <- weekdays(newDF[,2]
)
wdays
newDF$day <- weekdays(newdf$date)
newDF$day <- weekdays(newDF$date)
newDF
head(newDF)
head(newDF)
lapply(newDF[,4], function(x) if(newDF$day =="Sunday" | newDF$day == "Saturday"))
lapply(newDF[,4], function(x) if(newDF$day =="Sunday" | newDF$day == "Saturday")
lapply(newDF[,4], function(x) if(newDF$day =="Sunday" | newDF$day == "Saturday") newDF$WE <- workingd else newDF$WE <- weekend)
lapply(newDF[,4], function(x) if(newDF$day =="Sunday" | newDF$day == "Saturday") newDF$WE <- "weekday" else newDF$WE <- "weekend")
newDF[1:20,]
lapply(newDF[,4], function(x) if((newDF$day =="Sunday") | (newDF$day == "Saturday")) newDF$WE <- "weekday" else newDF$WE <- "weekend")
newDF
if ((weekdays(newDF$date)=="Saturday") | (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
if ((weekdays(newDF$date)=="Saturday") || (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
newDF
head(newDF)
newDF
newDF[1:50,]
newDF[,4]
if ((weekdays(newDF$date)=="Saturday") | (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
if ((weekdays(newDF$date)=="Saturday") || (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
newDF <- inDF
numIterations <- nrow(inDF)
for (i in 1:numIterations)
{
if(is.na(newDF[i,1]))
{
tsInt <- inDF[i,3]
tempDF <- subset(dailyAvgDF, interval == tsInt)
newDF[i,1] <- tempDF[1,2]
}
}
agDF2 <- aggregate(newDF$steps, list(inDF$date), sum, na.rm=TRUE )
hist(agDF2[,2], col="grey", main="Total Number of Steps Taken Each Day", xlab="Number of Steps", ylab="Number of Days")
agMean2 <- mean(agDF2[,2])
agMedian2 <- median(agDF2[,2])
head(newDF)
if ((weekdays(newDF$date)=="Saturday") || (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
head(newDF)
head(newDF, 100
)
if ((weekdays(newDF$date)=="Saturday") || (weekdays(newDF$date)=="Sunday")) newDF$day <- "Weekend" else newDF$day <- "weekday"
newDF$day <- ifelse(weekdays(newDF$date)=="Saturday" || weekdays
newDF$day <- ifelse(weekdays(newDF$date)=="Saturday" || weekdays(newDF$date)=="Sunday", "weekend","weekday")
head(newDF)
newDF(1:100)
newDF[1:100]
newDF[1:100,]
unique(newDF[,4])
newDF$dayname <- weekdays(newDF$date)
unique(newDF[,4])
names(newDF)
unique(newDF[,5])
newDF$day <- ifelse(newDF$dayname=="Saturday" || newDFF$dayname == "Sunday"), "weekend", "weekday")
newDF$day <- ifelse(newDF$dayname=="Saturday" || newDF$dayname == "Sunday"), "weekend", "weekday")
newDF$day <- ifelse((newDF$dayname=="Saturday") || (newDFF$dayname == "Sunday")), "weekend", "weekday")
newDF$day <- ifelse((newDF$dayname=="Saturday") || (newDF$dayname == "Sunday")), "weekend", "weekday")
newDF$day <- ifelse((newDF$dayname=="Saturday") || (newDF$dayname == "Sunday"), "weekend", "weekday")
newDF$day
unique(newDF[,5])
unique(newDF[,4])
newDF$day <- ifelse((newDF$dayname==c("Saturday", "Sunday"), "weekend", "weekday")
newDF$day <- ifelse(newDF$dayname==c("Saturday", "Sunday"), "weekend", "weekday")
unique(newDF[,4])
newDF[1:100,]
newDF[newDF$dayname=="Saturday"]
newDF[200:300]
newDF[200:300,]
weekdayDF <- subset(newDF, day="weekday")
plot(weekdayDF[,1], weekdayDF[,2],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
names(weekdayDF)
plot(weekdayDF[,2], weekdayDF[,1],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
weekdayDF[1:30,]
plot(weekdayDF[,3], weekdayDF[,1],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
nrow(weekdayDF)
avgweekdayDF <- aggregate(weekdayDF$steps, list(weekdayDF$date), mean, na.rm=TRUE)
plot(weekdayDF[,3], weekdayDF[,1],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(avgWeekdayDF[,3], avgWeekdayDF[,1],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(avgweekdayDF[,3], avgweekdayDF[,1],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(avgweekdayDF[,1], avgweekdayDF[,2],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
nrow(avgweekdayDF)
#split the dataframe, aggregate data by day
weekdayDF <- subset(newDF, day="weekday")
avgweekdayDF <- aggregate(weekdayDF$steps, list(weekdayDF$date), mean, na.rm=TRUE)
weekendDF <- subset(newDF, day="weekend")
avgweekendDF <- aggregate(weekendDF$steps, list(weekendDF$date), mean, na.rm=TRUE)
#plot the two graphs
par(mfrow,c(2,1))
plot(weekendDF[,1], weekendDF[,2],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(weekdayDF[,1], weekdayDF[,2],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps")
par(mfrow = c(1,2))
plot(weekendDF[,1], weekendDF[,2],type="l", main="Average Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(weekdayDF[,1], weekdayDF[,2],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps")
names(weekendDF)
avgweekdayDF <- aggregate(weekdayDF$steps, list(weekdayDF$interval), mean, na.rm=TRUE)
nrow(avgweekdayDF)
avgweekdayDF[interval==5,]
names(avgweekdayDF)
head(avgweekdayDF)
avgweekdayDF <- aggregate(weekdayDF$steps, list(weekdayDF$interval),
mean, na.rm=TRUE)
colnames(avgweekdayDF) <- c("interval", "avgSteps")
fiveminDF <- subset(avgweekdayDF, interval==5)
fiveminDF
weekdayDF <- subset(newDF, day="weekday" && interval==5)
nrow(weekday)
nrow(weekdayDF)
nrow(newDF)
weekdayDF <- subset(newDF, (day="weekday") && (interval==5))
weekdayDF <- subset(newDF, (day="weekday" && interval==5))
weekdayDF <- subset(newDF, (day=="weekday" && interval==5))
names(weekdayDF)
head(weekdayDF)
weekdayDF <- subset(newDF, day=="weekday")
weekendDF <- subset(newDF, day=="weekend")
head(weekendDF)
nrow(weekendDF)
weekendDF <- subset(newDF, day=="weekend" & interval==5)
unique(newDF[,4])
unique(newDF[,2])
unique(newDF[,3])
weekendDF <- subset(newDF, day=="weekend" & interval==5)
weekdayDF <- subset(newDF, day=="weekday" & interval==5)
plot(weekdayDF[,1], weekdayDF[,2],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps")
names(weekdayDF)
plot(weekdayDF[,2], weekdayDF[,1],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps")
plot(weekdayDF[,2], weekdayDF[,1],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
par(mfrow = c(2,1))
plot(weekendDF[,2], weekendDF[,1],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
plot(weekdayDF[,2], weekdayDF[,1],type="l", main="Average Weekday Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
weekdayDF <- subset(newDF, day=="weekday")
weekdayAvgDF <- aggregate(weekdayDF$steps, list(weekdayDF$interval), mean,
na.rm=TRUE)
colnames(dailyAvgDF) <- c("interval", "avgSteps")
plot(weekdayAvgDF[,1], weekdayAvgDF[,1],type="l", main="Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
plot(weekdayAvgDF[,1], weekdayAvgDF[,1],type="l", main="Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
plot(weekdayAvgDF[,1], weekdayAvgDF[,2],type="l", main="Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps", xaxt="n")
plot(weekdayAvgDF[,1], weekdayAvgDF[,2],type="l", main="Weekend Activity Pattern", xlab="", ylab="Avg. # of Steps")
